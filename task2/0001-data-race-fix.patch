From f906245189402278e12182e1c564af9c5c9ac546 Mon Sep 17 00:00:00 2001
From: Andrei <therain.i@yahoo.com>
Date: Wed, 29 May 2024 04:45:11 +0300
Subject: [PATCH] data race fix

---
 multi-lookup.c | 58 ++++++++++++++++++++++++++++----------------------
 1 file changed, 33 insertions(+), 25 deletions(-)

diff --git a/multi-lookup.c b/multi-lookup.c
index 5bc2522..ca80d7a 100644
--- a/multi-lookup.c
+++ b/multi-lookup.c
@@ -6,7 +6,7 @@
 
 /* Globals to be shared by all threads */
 pthread_cond_t empty, fill;
-pthread_mutex_t mutex, write_mutex, cntr_mutex;
+pthread_mutex_t mutex, write_mutex;
 
 queue basket;
 char *output_file_name;
@@ -26,16 +26,27 @@ void *inputUrls(void* file_descriptor)
 	
 	if(!input_file)
 	{
-		pthread_mutex_lock(&cntr_mutex);
+		pthread_mutex_lock(&mutex);
 		open_requests--;
-		pthread_mutex_unlock(&cntr_mutex);
+		pthread_cond_signal(&fill);
+		pthread_mutex_unlock(&mutex);
+
 		fprintf(stderr, "error opening input file\n");
 		return NULL;
 	}
 
-	while(fscanf(input_file, INPUTFS, url) != EOF)
+	while(1)
 	{
 		pthread_mutex_lock(&mutex);	
+
+		if((fscanf(input_file, INPUTFS, url) == EOF))
+		{
+			open_requests--;
+			pthread_cond_signal(&fill);
+			pthread_mutex_unlock(&mutex);
+			break;
+		}
+
 		while(queue_is_full(&basket))
 		{
 			pthread_cond_wait(&empty, &mutex);
@@ -58,10 +69,6 @@ void *inputUrls(void* file_descriptor)
 	}	
 	
 	fclose(input_file);	
-
-	pthread_mutex_lock(&cntr_mutex);	
-	open_requests--;
-	pthread_mutex_unlock(&cntr_mutex);
 		
 	return NULL;
 }
@@ -69,11 +76,10 @@ void *inputUrls(void* file_descriptor)
 /* Consumer -- pops urls from queue and looks up their given IP addresses using dnslookup() */
 void *outputUrls()
 {
-	int queue_empty = 1;	
 	char firstipstr[MAX_IP_LENGTH];
 	char *hostname;
 
-	while(!queue_empty || open_requests)
+	while(1)
 	{
 		pthread_mutex_lock(&mutex);
 	
@@ -82,20 +88,22 @@ void *outputUrls()
 			pthread_cond_wait(&fill, &mutex);
 		}
 
-		if(!(queue_empty = queue_is_empty(&basket)))
+		if(queue_is_empty(&basket))
 		{
-			hostname = queue_pop(&basket);
-			pthread_cond_signal(&empty);
-			
-			if(hostname == NULL)
-			{
-				fprintf(stderr, "queue pop failed\n");
-				break;
-			}
-			else
-			{
-				queue_empty = queue_is_empty(&basket);
-			}
+			int local = open_requests;
+			pthread_mutex_unlock(&mutex);
+
+			if(local == 0) break;
+			continue;
+		}
+
+		hostname = queue_pop(&basket);
+		pthread_cond_signal(&empty);
+
+		if(hostname == NULL)
+		{
+			fprintf(stderr, "queue pop failed\n");
+			break;
 		}
 
 		pthread_mutex_unlock(&mutex);	
@@ -131,7 +139,7 @@ int main(int argc, char* argv[])
 
 
 	/* Init mutexes, cond vars and queue */
-	if(pthread_mutex_init(&mutex, NULL) || pthread_mutex_init(&write_mutex, NULL) || pthread_mutex_init(&cntr_mutex, NULL))
+	if(pthread_mutex_init(&mutex, NULL) || pthread_mutex_init(&write_mutex, NULL))
 	{
 		fprintf(stderr, "error initializing mutexes");
 	}
@@ -184,7 +192,7 @@ int main(int argc, char* argv[])
 	}
 	
 	/* Dealloc memory given to mutexs, condvars, queue and output file*/
-	if(pthread_mutex_destroy(&mutex) || pthread_mutex_destroy(&cntr_mutex) || pthread_mutex_destroy(&write_mutex))
+	if(pthread_mutex_destroy(&mutex) || pthread_mutex_destroy(&write_mutex))
 	{
 		fprintf(stderr, "error destroying mutexes");
 	}
-- 
2.45.1

